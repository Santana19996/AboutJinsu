@page "/"
@using Top10Played.Models
@using Top10Played.Services
@inject SpotifyService SpotifyService
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<h1 style="font-family: 'Cinzel', serif; font-weight: bold; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); color: #ff4500; text-align: center; margin-top: 20px; background-color: #121212; padding: 10px; border-radius: 10px;">
    ☾ Recently Played Tracks ☽
</h1>

<div style="font-family: 'Cinzel', serif; font-size: 18px; font-weight: bold; text-align: center; margin-top: 10px; color: #cccccc; background-color: #121212; padding: 15px; border-radius: 10px;">
    <p>✧ Ｉｆ ｙｏｕ ｃａｎ ｖｉｂｅ ｗｉｔｈ ｔｈｅｓｅ ｓｏｎｇｓ, ｗｅ ｃａｎ ｂｅ ｆｒｉｅｎｄｓ.</p>
    <p>☠ Ｉｆ ｎｏｔ, ｇｅｔ ｂｅｔｔｅｒ ｍｕｓｉｃ ｔａｓｔｅ. ☠</p>
    <p style="margin-top: 15px;">👾 𝕀𝕟𝕥𝕖𝕣𝕖𝕤𝕥𝕤:</p>
    <p>🎮 𝐆𝐚𝐦𝐞𝐫 • 🛡️ 𝐕𝐞𝐭𝐞𝐫𝐚𝐧 • 🏋️ 𝐆𝐲𝐦 • ✨ 𝐀𝐧𝐢𝐦𝐞</p>
    <p>🎵 𝐒𝐮𝐢𝐜𝐢𝐝𝐞 𝐁𝐨𝐲𝐬 • 👻 𝐆𝐡𝐨𝐬𝐭𝐞𝐦𝐚𝐧𝐞 • 🅿 𝐏𝐡𝐨𝐧𝐤</p>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="error-message" style="color: red; text-align: center; margin-top: 20px;">
        <p>@ErrorMessage</p>
    </div>
}
else if (RecentlyPlayed == null)
{
    <p style="text-align: center; color: gray; margin-top: 20px;">Loading...</p>
}
else
{
    <div class="tracks" style="display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; margin-top: 20px; background-color: #121212; padding-bottom: 20px;">
        @foreach (var item in RecentlyPlayed)
        {
            <div class="track" style="border: 1px solid #444; border-radius: 8px; padding: 10px; text-align: center; width: 250px; box-shadow: 0 4px 8px rgba(0,0,0,0.5); background: rgba(0, 0, 0, 0.9); transition: transform 0.2s, background-color 0.2s; hover: { transform: scale(1.05); background-color: #333; }">
                <img src="@item.Track.Album.Images.FirstOrDefault()?.Url" alt="@item.Track.Name" style="width: 100%; height: auto; border-radius: 8px;" />
                <h4 style="font-family: 'Cinzel', serif; font-size: 18px; font-weight: bold; color: #ff4500; margin-top: 10px; text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);">@item.Track.Name</h4>
                <p style="font-size: 14px; color: #cccccc;">Artist: @string.Join(", ", item.Track.Artists.Select(a => a.Name))</p>
                <p style="font-size: 12px; color: #aaaaaa;">Played: @GetTimeAgo(item.PlayedAt)</p>

                @if (YouTubeVideos.TryGetValue(item.Track.Name, out var video))
                {
                    <div>
                        <button onclick="playVideo('@video.VideoId')" style="margin-right: 10px;">▶ Play</button>
                        <button onclick="stopVideo('@video.VideoId')">⏹ Stop</button>
                        <div id="player-@video.VideoId" style="display: none;"></div>
                    </div>
                }
                else
                {
                    <p style="font-size: 12px; color: gray;">Searching YouTube...</p>
                }
            </div>
        }
    </div>
}

@code {
    private List<SpotifyRecentlyPlayedItem>? RecentlyPlayed;
    private Dictionary<string, YouTubeVideo> YouTubeVideos = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            RecentlyPlayed = await SpotifyService.GetRecentlyPlayedAsync();

            if (RecentlyPlayed != null)
            {
                foreach (var item in RecentlyPlayed)
                {
                    var query = $"{item.Track.Name} {string.Join(", ", item.Track.Artists.Select(a => a.Name))}";
                    var video = await FetchYouTubeVideoAsync(query);

                    if (video != null && video.Any())
                    {
                        YouTubeVideos[item.Track.Name] = video.First();
                    }
                }
            }
        }
        catch (UnauthorizedAccessException)
        {
            ErrorMessage = "Failed to fetch recently played tracks. Please check your access token.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    private async Task<List<YouTubeVideo>> FetchYouTubeVideoAsync(string query)
    {
        try
        {
            return await JSRuntime.InvokeAsync<List<YouTubeVideo>>("fetchAndSearchYouTube", 
                Configuration["YouTube:ClientId"], 
                Configuration["YouTube:ClientSecret"], 
                Configuration["YouTube:RefreshToken"], 
                query);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching YouTube video for query '{query}': {ex.Message}");
            return new List<YouTubeVideo>();
        }
    }

    private string GetTimeAgo(DateTime playedAt)
    {
        var localPlayedAt = TimeZoneInfo.ConvertTimeFromUtc(playedAt, TimeZoneInfo.Local);
        var now = DateTime.Now;
        var difference = now - localPlayedAt;

        if (difference.TotalMinutes < 1)
        {
            return "just now";
        }
        if (difference.TotalMinutes < 60)
        {
            return $"{Math.Floor(difference.TotalMinutes)} minutes ago";
        }
        if (difference.TotalHours < 24)
        {
            return $"{Math.Floor(difference.TotalHours)} hours ago";
        }
        return $"{Math.Floor(difference.TotalDays)} days ago";
    }
}
